import requests
import time
import telebot
from telebot import types
from datetime import datetime
import pytz
import threading

TOKEN = '7957207504:AAGEKxZrEcAI1iLgdKw6bvrLQ9rylYuqK_I'
bot = telebot.TeleBot(TOKEN)

API_URL = "https://api.alerts.in.ua/v1/alerts/active.json"
API_TOKEN = "3b5106a1058f3c29227de73d95c1dcabc2488358ab2203"

headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Cache-Control": "no-cache"
}




REGIONS = [
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º",
    "–º. –ö–∏—ó–≤"
]


active_monitoring_threads = {}
alerts_status = {}


def get_active_alerts():
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        return response.json().get("alerts", [])
    return []


def check_current_alert_status(region):
    kyiv_tz = pytz.timezone("Europe/Kyiv")
    alerts = get_active_alerts()

    oblast_alerts = [
        alert for alert in alerts
        if alert.get("location_oblast") == region and alert.get("location_title", "").strip() == region
    ]

    if oblast_alerts:
        start_time = oblast_alerts[0].get("started_at", "–Ω–µ–≤—ñ–¥–æ–º–æ")
        if start_time != "–Ω–µ–≤—ñ–¥–æ–º–æ":
            start_time = pytz.utc.localize(datetime.strptime(start_time, "%Y-%m-%dT%H:%M:%S.%fZ")).astimezone(kyiv_tz)
            start_time = start_time.strftime("%d/%m/%Y %H:%M:%S")
        return True, f"üö® {region}: –∞–∫—Ç–∏–≤–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞! –ü–æ—á–∞—Ç–æ–∫: {start_time}."
    else:
        return False, f"‚úÖ {region}: —Ç—Ä–∏–≤–æ–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."


def check_region_alerts(monitoring_state, stop_event):
    region = monitoring_state["region"]
    chat_id = monitoring_state["chat_id"]

    while not stop_event.is_set():
        current_alert_status, message = check_current_alert_status(region)

        last_status = alerts_status.get(region, None)

        if current_alert_status != last_status:
            bot.send_message(chat_id, message)
            alerts_status[region] = current_alert_status

        time.sleep(10)


@bot.message_handler(commands=["start"])
def set_monitored_region(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for region in REGIONS:
        keyboard.add(types.KeyboardButton(region))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in REGIONS)
def start_monitoring(message):
    region = message.text
    chat_id = message.chat.id

    if chat_id in active_monitoring_threads:
        stop_event, thread = active_monitoring_threads[chat_id]
        stop_event.set()
        thread.join()

    monitoring_state = {"region": region, "chat_id": chat_id}
    bot.send_message(chat_id, f"üîç {region}: –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∏–≤–æ–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.")

    stop_event = threading.Event()
    monitoring_thread = threading.Thread(
        target=check_region_alerts, args=(monitoring_state, stop_event), daemon=True
    )
    monitoring_thread.start()

    active_monitoring_threads[chat_id] = (stop_event, monitoring_thread)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.polling(non_stop=True)
